@model Marketplace.Admin.ViewModels.ServiceProviderViewModel


@Html.HiddenFor(model => model.Id)

<div class="form-group">
    @Html.LabelFor(model => model.SignUpUrl, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.SignUpUrl, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SignUpUrl, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.StatusUrl, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.StatusUrl, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.StatusUrl, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.UnEnrollUrl, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.UnEnrollUrl, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.UnEnrollUrl, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    <div class="col-md-6">
        <div class="col-md-offset-4 col-md-6">
            @Html.LabelFor(model => model.GenerateBearerToken, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="col-md-offset-6 col-md-6">
            <div class="checkbox">
                @Html.RadioButtonFor(model => model.GenerateBearerToken, "True", new { @id = "GenerateBearerTokenYes" })
                <label style="display:inline" for="GenerateBearerTokenYes">Yes</label>
                @if (Model != null)
                {
                    @Html.RadioButtonFor(model => model.GenerateBearerToken, "False", new { @class = "ML-20", id = "GenerateBearerTokenNo" })
                }
                else
                {
                    @Html.RadioButtonFor(model => model.GenerateBearerToken, "False", new { @class = "ML-20", id = "GenerateBearerTokenNo", @checked = true })
                }
                <label style="display:inline" for="GenerateBearerTokenNo">No</label>

                @Html.ValidationMessageFor(model => model.GenerateBearerToken, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-md-4">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="col-md-offset-1 col-md-8">
            <div class="checkbox">
                @Html.RadioButtonFor(model => model.IsActive, "True", new { @id = "IsActiveYes" })
                <label style="display:inline" for="IsActiveYes">Yes</label>
                @if (Model != null)
                {
                    @Html.RadioButtonFor(model => model.IsActive, "False", new { @class = "ML-20", id = "IsActiveNo" })
                }
                else
                {
                    @Html.RadioButtonFor(model => model.IsActive, "False", new { @class = "ML-20", id = "IsActiveNo", @checked = true })
                }
                <label style="display:inline" for="IsActiveNo">No</label>
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.TokenUrl, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.TokenUrl, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.TokenUrl, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.AppId, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.AppId, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.AppId, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.SecretKey, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-6">
        @Html.EditorFor(model => model.SecretKey, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SecretKey, "", new { @class = "text-danger" })
    </div>
</div>